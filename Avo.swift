// Generated by Avo VERSION 106.39.0. You should never have to make changes to this file.
// If you find yourself in the situation where you have to edit the file please contact us at hi@avo.app.
// If you encounter a git conflict in this file run `avo pull` and it will be resolved automatically.
// swiftlint:disable all

import Foundation

import UIKit

public enum AvoEnv {
    case prod
    case dev
}

private enum AvoAssertMessage {
    case expectedMax(propertyId: String, message: String)
    case expectedMin(propertyId: String, message: String)

    func getMessage() -> String {
        switch self {
        case .expectedMax(_, let message):
            return message
        case .expectedMin(_, let message):
            return message
        }
    }
}

private struct AvoAssert {
    private init() {}

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Double, value: Double) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Int, value: Int) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Double, value: Double) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Int, value: Int) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }
}

public protocol AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool
    func logWarn(env: AvoEnv, message: String) -> Bool
    func logError(env: AvoEnv, message: String) -> Bool
}

private class EmptyAvoLogger: AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logWarn(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logError(env: AvoEnv, message: String) -> Bool {
        return false
    }
}

private struct InternalAvoLogger {
    private init() {}

    static func logEventSent(
      _ env: AvoEnv,
      _ avoLogger: AvoLogger,
      _ eventName: String,
      _ eventProperties: [String:Any?],
      _ userProperties: [String:Any]
    ) {
        let message = "Event Sent: \(eventName) Event Props: \(eventProperties as AnyObject) User Props: \(userProperties as AnyObject)"
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logDebug(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logWarn(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logWarn(env: env, message: message)) {
            NSLog("[avo] Warning! " + message)
        }
    }

    static func logError(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logError(env: env, message: message)) {
            NSLog("[avo] Error! " + message)
        }
    }
}

public protocol AvoCustomDestination {
    func make(env: AvoEnv)

    func make(env: AvoEnv, apiKey: String?)

    func logEvent(eventName: String, eventProperties: [String:Any])

    func setUserProperties(userId: String, userProperties: [String:Any])

    func identify(userId: String)

    func unidentify()

    func logPage(pageName: String, eventProperties: [String:Any])

    func revenue(amount: Double, eventProperties: [String:Any])
}

extension  AvoCustomDestination {
    func make(env: AvoEnv) {}

    func make(env: AvoEnv, apiKey: String?) {
        self.make(env: env)
    }
}


private struct AvoInvoke {
    static func toISO8601UTC(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter.string(from: date)
    }

    static var samplingRate = 1.0

    static func invoke(_ eventId: String, _ hash: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let me: [[String: Any]] = messages.map({
                    switch $0 {
                    case .expectedMax(let propertyId, _):
                        return ["tag": "expectedMax", "propertyId": propertyId]
                    case .expectedMin(let propertyId, _):
                        return ["tag": "expectedMin", "propertyId": propertyId]
                    }
                })
                let payload: [String: Any] = [
                    "ac": "2vonxRVL3039a5uXyWDU",
                    "br": "master",
                    "en": "dev",
                    "ev": eventId,
                    "ha": hash,
                    "sc": "M4rnD9FTAhZjl2fTnXLN",
                    "se": toISO8601UTC(Date()),
                    "so": "jm_s8y9kL",
                    "va": messages.isEmpty,
                    "me": me,
                    "or": "event"
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                        let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }

    static func invokeMeta(_ type: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let payload: [String: Any] = [
                    "ac": "2vonxRVL3039a5uXyWDU",
                    "br": "master",
                    "en": "dev",
                    "ty": type,
                    "sc": "M4rnD9FTAhZjl2fTnXLN",
                    "se": toISO8601UTC(Date()),
                    "so": "jm_s8y9kL",
                    "va": messages.isEmpty,
                    "me": []
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                       let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }
}

public protocol AvoProtocol {
    init (env: AvoEnv, enumaDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, strict: Bool,
        noop: Bool);
    
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - labelName: name of label
       - labelColor: color of label
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/ZvwSL1YEPb)
     */
    func createLabel(labelName: String, labelColor: String);
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/Fixp8iotAy)
     */
    func deleteLabel(labelName: String);
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - uuid: device id
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/RWqDc3YbmK)
     */
    func loadApp(uuid: String);
    
    /**
     SwipeRight: User swipe the screenshots to right on MainLabelingView
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/mEMk_OnSYu)
     */
    func swipeRight();
    
    /**
     SwipeLeft: User swipe the screenshots to the left on MainLabelingView
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/s_T8JSaCCf)
     */
    func swipeLeft();
    
    /**
     MainLabelingView: TabBar1 MainLabelingView
    
     - SeeAlso: [MainLabelingView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/-ngQK87QFF)
     */
    func mainLabelingView();
    
    /**
     HomeView: TabBar2 HomeView
    
     - parameters:
       - labelList: list of labelEntity
    
     - SeeAlso: [HomeView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/R4h1Xtm1Oh)
     */
    func homeView(labelList: [Avo.LabelList]?);
    
    /**
     SettingView: Settings View
    
     - SeeAlso: [SettingView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/kQxuLrymfA)
     */
    func settingView();
    
    /**
     LabelAlbumView: TabBar3 LabelView
    
     - SeeAlso: [LabelAlbumView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/7L_CxPH87C)
     */
    func labelAlbumView();
    
    /**
     ScreenshotLabeling: labeling the screenshots
    
     - parameters:
       - labelList: list of labelEntity
    
     - SeeAlso: [ScreenshotLabeling](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/9_Dh-CMg9H)
     */
    func screenshotLabeling(labelList: [Avo.LabelList]);
    
    /**
     SkipButton: skip button touched on MainLabelingView
    
     - SeeAlso: [SkipButton](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/EIx3tKnrRD)
     */
    func skipButton();
    
    /**
     SelectButton: select button touched on MainLabelingView
    
     - SeeAlso: [SelectButton](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/lSrDDToAwV)
     */
    func selectButton();
    
}

public class Avo: AvoProtocol {
    var __STRICT__: Bool = true
    public var __ENV__: AvoEnv = .prod
    public var __NOOP__: Bool = false
    var __DEBUGGER__: NSObject?
    var __INSPECTOR__: NSObject?
    var avoLogger: AvoLogger = EmptyAvoLogger()
    
    private func __MOBILE_DEBUGGER_ENABLED__() -> Bool {
        let selector = #selector(getter: UIFocusGuide.isEnabled)
        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            return self.__DEBUGGER__?.perform(selector) != nil
        } else {
            return false
        }
    }

    private func __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: String) {
        let selector = Selector(("setSchemaId:"))

        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            self.__DEBUGGER__?.perform(selector, with: schemaId)
        }
    }

    private func __MOBILE_DEBUGGER_POST_EVENT__(name: String, eventId: String, eventProps: Array<Dictionary<String, String>>, userProps: Array<Dictionary<String, String>>, messages: Array<Dictionary<String, String>>) {
        let params:[String: Any?] = ["timestamp": NSNumber(floatLiteral: Date().timeIntervalSince1970), "id": eventId,
                      "messages": messages, "eventProps": eventProps, "userProps": userProps]

        let selector = Selector(("publishEvent:withParams:"))
        self.__DEBUGGER__?.perform(selector, with: name, with: params)
    }
    
    public struct LabelEntity: Equatable {
        public init(labelName: String, labelColor: String) {
            self.labelName = labelName
            self.labelColor = labelColor
        }
        
        let labelName: String
        let labelColor: String
    }
    
    public struct LabelList: Equatable {
        public init(labelEntity: LabelEntity) {
            self.labelEntity = labelEntity
        }
        
        let labelEntity: LabelEntity
    }
    
    let enuma: AvoCustomDestination
    
    let rudderStack: AvoCustomDestination
    
    public required init (env: AvoEnv,
        enumaDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, strict: Bool = true,
        noop: Bool = false) {
        __STRICT__ = strict
        __ENV__ = env
        __NOOP__ = noop
        
        enuma = enumaDestination
        rudderStack = rudderStackDestination
        if __NOOP__ && __ENV__ == .prod {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] WARNING!!! [avo]" +
          "\n    [avo] Avo cannot be initialized in noop mode in production:" +
          "\n    [avo] - Overwriting configuration with noop=false." +
          "\n    [avo] - Please reach out if you want to be able to run Avo in production mode with noop=true" +
          "\n    ****************************************************")
            __NOOP__ = false
        }
        if __NOOP__ {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] Avo is now initialized in noop mode. This means:" +
          "\n    [avo] - No events will be sent" +
          "\n    [avo] - No network requests are made" +
          "\n    ****************************************************")
        }
        if !__NOOP__ {
            if __ENV__ == .prod {
            }
            if __ENV__ == .dev {
            }
            if __ENV__ == .prod {
                enuma.make(env: env, apiKey: nil)
            } else if __ENV__ == .dev {
                enuma.make(env: env, apiKey: nil)
            } else {
                InternalAvoLogger.logError(__ENV__, avoLogger, "[avo] ERROR No staging key is set for Enuma. Head to destination settings in Avo to set a staging key.")
                enuma.make(env: env, apiKey: nil)
            }
            if __ENV__ == .prod {
                rudderStack.make(env: env, apiKey: "27f1RQjDlKZhHpdGiT4z3JYe8EC")
            } else if __ENV__ == .dev {
                rudderStack.make(env: env, apiKey: "27f1RPyf43JsLVZ5FGGAphtlSJ3")
            } else {
                InternalAvoLogger.logError(__ENV__, avoLogger, "[avo] ERROR No staging key is set for RudderStack. Head to destination settings in Avo to set a staging key.")
                rudderStack.make(env: env, apiKey: nil)
            }
            if __ENV__ != .prod {
                // debug console in Avo
                AvoInvoke.invokeMeta("init", [])
            }
            let className = "AvoInspector"
            let avoInspectorClass = NSClassFromString(className) as? NSObject.Type

            if let InspectorClass = avoInspectorClass {
                self.__INSPECTOR__ = InspectorClass.init()
                let initSelector = Selector(("initWithApiKey:envInt:"))
                if (self.__INSPECTOR__?.responds(to: initSelector)) == true {
                    if __ENV__ == .prod {
                        self.__INSPECTOR__?.perform(initSelector, with:"PXSDmMdhEjkWGSAyaJAq", with:0)
                    } else if __ENV__ == .dev {
                        self.__INSPECTOR__?.perform(initSelector, with:"PXSDmMdhEjkWGSAyaJAq", with:1)
                    }
                } else {
                  let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                  InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            
        }
    }
    
    public convenience init (env: AvoEnv,
        enumaDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, debugger: NSObject,
        strict: Bool = false, noop: Bool = false) {
        self.init(env: env,  enumaDestination: enumaDestination,  rudderStackDestination: rudderStackDestination, strict: strict,noop: noop)
        if !__NOOP__ {
            self.__DEBUGGER__ = debugger
            __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: "M4rnD9FTAhZjl2fTnXLN")
        }
    }
    
    private func assertLabelEntity(_ labelEntity: LabelEntity
        ) -> [AvoAssertMessage] {
        return []
    }
    
    private func assertLabelList(_ labelList: [LabelList]
        ) -> [AvoAssertMessage] {
        return []
    }
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - labelName: name of label
       - labelColor: color of label
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/ZvwSL1YEPb)
     */
    public func createLabel(labelName: String, labelColor: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("ZvwSL1YEPb", "2e0bd4fbebc3edf3c559273d95f9126a88b1730ec5fc5a96648117aab8d78105", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "-YLt7x6xcv", "name" : "label_name", "value" : String(describing:labelName)],
                  ["id" : "aAVoOSE9s", "name" : "label_color", "value" : String(describing:labelColor)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "CreateLabel", eventId: "ZvwSL1YEPb", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["label_name"] = labelName
            avoLogEventProperties["label_color"] = labelColor
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "CreateLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["label_name"] = labelName
                    inspectorEventProperties["label_color"] = labelColor
                    inspectorEventProperties["avoFunctionEventId"] = "ZvwSL1YEPb"
                    inspectorEventProperties["avoFunctionEventHash"] = "2e0bd4fbebc3edf3c559273d95f9126a88b1730ec5fc5a96648117aab8d78105"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"CreateLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            var enumaEventProperties: [String: Any] = [:]
            enumaEventProperties["label_name"] = labelName
            enumaEventProperties["label_color"] = labelColor
            enuma.logEvent(eventName: "CreateLabel", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["label_name"] = labelName
            rudderStackEventProperties["label_color"] = labelColor
            rudderStack.logEvent(eventName: "CreateLabel", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/Fixp8iotAy)
     */
    public func deleteLabel(labelName: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("Fixp8iotAy", "423e710b314c807ca9604e297d9079b6538dad9a07762191a2370e7aa2c094fc", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "-YLt7x6xcv", "name" : "label_name", "value" : String(describing:labelName)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "DeleteLabel", eventId: "Fixp8iotAy", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["label_name"] = labelName
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "DeleteLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["label_name"] = labelName
                    inspectorEventProperties["avoFunctionEventId"] = "Fixp8iotAy"
                    inspectorEventProperties["avoFunctionEventHash"] = "423e710b314c807ca9604e297d9079b6538dad9a07762191a2370e7aa2c094fc"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"DeleteLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            var enumaEventProperties: [String: Any] = [:]
            enumaEventProperties["label_name"] = labelName
            enuma.logEvent(eventName: "DeleteLabel", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["label_name"] = labelName
            rudderStack.logEvent(eventName: "DeleteLabel", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - uuid: device id
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/RWqDc3YbmK)
     */
    public func loadApp(uuid: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("RWqDc3YbmK", "009fb440889136eea6abed1194a7afc2e4cd7c00c660b51dee2d11bcb6a50ad2", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "M18-6DIIcf", "name" : "uuid", "value" : String(describing:uuid)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LoadApp", eventId: "RWqDc3YbmK", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["uuid"] = uuid
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LoadApp", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["uuid"] = uuid
                    inspectorEventProperties["avoFunctionEventId"] = "RWqDc3YbmK"
                    inspectorEventProperties["avoFunctionEventHash"] = "009fb440889136eea6abed1194a7afc2e4cd7c00c660b51dee2d11bcb6a50ad2"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LoadApp", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            var enumaEventProperties: [String: Any] = [:]
            enumaEventProperties["uuid"] = uuid
            enuma.logEvent(eventName: "LoadApp", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["uuid"] = uuid
            rudderStack.logEvent(eventName: "LoadApp", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SwipeRight: User swipe the screenshots to right on MainLabelingView
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/mEMk_OnSYu)
     */
    public func swipeRight() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("mEMk_OnSYu", "44b2d6eab2c10f917607788af73dee6c3339b6a8b452cfead2922d5a664e028e", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeRight", eventId: "mEMk_OnSYu", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeRight", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "mEMk_OnSYu"
                    inspectorEventProperties["avoFunctionEventHash"] = "44b2d6eab2c10f917607788af73dee6c3339b6a8b452cfead2922d5a664e028e"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeRight", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "SwipeRight", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SwipeRight", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SwipeLeft: User swipe the screenshots to the left on MainLabelingView
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/s_T8JSaCCf)
     */
    public func swipeLeft() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("s_T8JSaCCf", "d7df18dac5d953aeb8614d12a443a1b6aaa52023351bb52fe76c8bf0f153c7d8", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeLeft", eventId: "s_T8JSaCCf", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeLeft", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "s_T8JSaCCf"
                    inspectorEventProperties["avoFunctionEventHash"] = "d7df18dac5d953aeb8614d12a443a1b6aaa52023351bb52fe76c8bf0f153c7d8"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeLeft", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "SwipeLeft", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SwipeLeft", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     MainLabelingView: TabBar1 MainLabelingView
    
     - SeeAlso: [MainLabelingView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/-ngQK87QFF)
     */
    public func mainLabelingView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("-ngQK87QFF", "44b2b0f9e34139dcb7d0589d248c321d36e774038f8afd81856a2ff67dd66fee", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "MainLabelingView", eventId: "-ngQK87QFF", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "MainLabelingView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "-ngQK87QFF"
                    inspectorEventProperties["avoFunctionEventHash"] = "44b2b0f9e34139dcb7d0589d248c321d36e774038f8afd81856a2ff67dd66fee"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"MainLabelingView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "MainLabelingView", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "MainLabelingView", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     HomeView: TabBar2 HomeView
    
     - parameters:
       - labelList: list of labelEntity
    
     - SeeAlso: [HomeView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/R4h1Xtm1Oh)
     */
    public func homeView(labelList: [LabelList]?) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("R4h1Xtm1Oh", "c68252ab90b7498c84a97f37bc7b3ee30e65279f1d56457ffe2eaab4fef59e63", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "hCGD5mMVzZ", "name" : "labelList", "value" : String(describing:labelList as Any)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "HomeView", eventId: "R4h1Xtm1Oh", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            if let labelList = labelList {
                avoLogEventProperties["labelList"] =
                    labelList.enumerated().map { (index, value) in
                        [
                            "labelEntity": value.labelEntity,
                        ]
                    }
            } else {
                avoLogEventProperties["labelList"] = nil
            }
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "HomeView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    if let labelList = labelList {
                        inspectorEventProperties["labelList"] =
                            labelList.enumerated().map { (index, value) in
                                [
                                    "labelEntity": value.labelEntity,
                                ]
                            }
                    } else {
                        inspectorEventProperties["labelList"] = nil
                    }
                    inspectorEventProperties["avoFunctionEventId"] = "R4h1Xtm1Oh"
                    inspectorEventProperties["avoFunctionEventHash"] = "c68252ab90b7498c84a97f37bc7b3ee30e65279f1d56457ffe2eaab4fef59e63"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"HomeView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            var enumaEventProperties: [String: Any] = [:]
            if let labelList = labelList {
                enumaEventProperties["labelList"] =
                    labelList.enumerated().map { (index, value) in
                        [
                            "labelEntity": value.labelEntity,
                        ]
                    }
            } else {
                enumaEventProperties["labelList"] = nil
            }
            enuma.logEvent(eventName: "HomeView", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            if let labelList = labelList {
                rudderStackEventProperties["labelList"] =
                    labelList.enumerated().map { (index, value) in
                        [
                            "labelEntity": value.labelEntity,
                        ]
                    }
            } else {
                rudderStackEventProperties["labelList"] = nil
            }
            rudderStack.logEvent(eventName: "HomeView", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SettingView: Settings View
    
     - SeeAlso: [SettingView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/kQxuLrymfA)
     */
    public func settingView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("kQxuLrymfA", "66f109420f2932bd4daf2767acda09918387f769389085cc53b393a0d4740fa8", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SettingView", eventId: "kQxuLrymfA", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SettingView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "kQxuLrymfA"
                    inspectorEventProperties["avoFunctionEventHash"] = "66f109420f2932bd4daf2767acda09918387f769389085cc53b393a0d4740fa8"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SettingView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "SettingView", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SettingView", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     LabelAlbumView: TabBar3 LabelView
    
     - SeeAlso: [LabelAlbumView](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/7L_CxPH87C)
     */
    public func labelAlbumView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("7L_CxPH87C", "8ec71c3c38faa748797f33fa7b5edaa569031aaae314d5645e648c1ddaf32032", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LabelAlbumView", eventId: "7L_CxPH87C", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LabelAlbumView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "7L_CxPH87C"
                    inspectorEventProperties["avoFunctionEventHash"] = "8ec71c3c38faa748797f33fa7b5edaa569031aaae314d5645e648c1ddaf32032"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LabelAlbumView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "LabelAlbumView", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "LabelAlbumView", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     ScreenshotLabeling: labeling the screenshots
    
     - parameters:
       - labelList: list of labelEntity
    
     - SeeAlso: [ScreenshotLabeling](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/9_Dh-CMg9H)
     */
    public func screenshotLabeling(labelList: [LabelList]) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            var messages: [AvoAssertMessage] = []
            messages += assertLabelList(labelList)
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("9_Dh-CMg9H", "2dff6f162db81cc0154d9f879113319cec421a05040e75c43b4b329b7d7af5e7", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "hCGD5mMVzZ", "name" : "labelList", "value" : String(describing:labelList)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "ScreenshotLabeling", eventId: "9_Dh-CMg9H", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
            if __STRICT__ {
                // throw exception if messages is not empty
                if !messages.isEmpty {
                    NSException(name:NSExceptionName.invalidArgumentException, reason:"Error sending event 'ScreenshotLabeling': \(messages[0].getMessage())", userInfo:nil).raise()
                }
            } else {
                for m in messages {
                    InternalAvoLogger.logDebug(__ENV__, avoLogger, "\(m.getMessage())")
                }
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["labelList"] =
                labelList.enumerated().map { (index, value) in
                    [
                        "labelEntity": value.labelEntity,
                    ]
                }
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "ScreenshotLabeling", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["labelList"] =
                        labelList.enumerated().map { (index, value) in
                            [
                                "labelEntity": value.labelEntity,
                            ]
                        }
                    inspectorEventProperties["avoFunctionEventId"] = "9_Dh-CMg9H"
                    inspectorEventProperties["avoFunctionEventHash"] = "2dff6f162db81cc0154d9f879113319cec421a05040e75c43b4b329b7d7af5e7"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"ScreenshotLabeling", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            var enumaEventProperties: [String: Any] = [:]
            enumaEventProperties["labelList"] =
                labelList.enumerated().map { (index, value) in
                    [
                        "labelEntity": value.labelEntity,
                    ]
                }
            enuma.logEvent(eventName: "ScreenshotLabeling", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["labelList"] =
                labelList.enumerated().map { (index, value) in
                    [
                        "labelEntity": value.labelEntity,
                    ]
                }
            rudderStack.logEvent(eventName: "ScreenshotLabeling", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SkipButton: skip button touched on MainLabelingView
    
     - SeeAlso: [SkipButton](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/EIx3tKnrRD)
     */
    public func skipButton() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("EIx3tKnrRD", "87afae3a485e4a1061a7fa11999f6827d9c134099c8f69bc5dc78b7e81fe8f6e", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SkipButton", eventId: "EIx3tKnrRD", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SkipButton", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "EIx3tKnrRD"
                    inspectorEventProperties["avoFunctionEventHash"] = "87afae3a485e4a1061a7fa11999f6827d9c134099c8f69bc5dc78b7e81fe8f6e"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SkipButton", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "SkipButton", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SkipButton", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SelectButton: select button touched on MainLabelingView
    
     - SeeAlso: [SelectButton](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/lSrDDToAwV)
     */
    public func selectButton() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("lSrDDToAwV", "c0ded259680452ebb195e6a066d25ee8d99a294850a5eca51cfc48b9acfce4f8", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SelectButton", eventId: "lSrDDToAwV", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SelectButton", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "lSrDDToAwV"
                    inspectorEventProperties["avoFunctionEventHash"] = "c0ded259680452ebb195e6a066d25ee8d99a294850a5eca51cfc48b9acfce4f8"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SelectButton", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Enuma
            let enumaEventProperties: [String: Any] = [:]
            enuma.logEvent(eventName: "SelectButton", eventProperties: enumaEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SelectButton", eventProperties: rudderStackEventProperties)
        }
    }
    
}

// AVOMODULEMAP:"avo"
// AVOEVENTMAP:["createLabel","deleteLabel","loadApp","swipeRight","swipeLeft","mainLabelingView","homeView","settingView","labelAlbumView","screenshotLabeling","skipButton","selectButton"]
