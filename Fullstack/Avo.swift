// Generated by Avo VERSION 104.37.0. You should never have to make changes to this file.
// If you find yourself in the situation where you have to edit the file please contact us at hi@avo.app.
// If you encounter a git conflict in this file run `avo pull` and it will be resolved automatically.
// swiftlint:disable all

import Foundation

import UIKit

public enum AvoEnv {
    case prod
    case dev
}

private enum AvoAssertMessage {
    case expectedMax(propertyId: String, message: String)
    case expectedMin(propertyId: String, message: String)

    func getMessage() -> String {
        switch self {
        case .expectedMax(_, let message):
            return message
        case .expectedMin(_, let message):
            return message
        }
    }
}

private struct AvoAssert {
    private init() {}

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Double, value: Double) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Int, value: Int) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Double, value: Double) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Int, value: Int) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }
}

public protocol AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool
    func logWarn(env: AvoEnv, message: String) -> Bool
    func logError(env: AvoEnv, message: String) -> Bool
}

private class EmptyAvoLogger: AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logWarn(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logError(env: AvoEnv, message: String) -> Bool {
        return false
    }
}

private struct InternalAvoLogger {
    private init() {}

    static func logEventSent(
      _ env: AvoEnv,
      _ avoLogger: AvoLogger,
      _ eventName: String,
      _ eventProperties: [String:Any?],
      _ userProperties: [String:Any]
    ) {
        let message = "Event Sent: \(eventName) Event Props: \(eventProperties as AnyObject) User Props: \(userProperties as AnyObject)"
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logDebug(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logWarn(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logWarn(env: env, message: message)) {
            NSLog("[avo] Warning! " + message)
        }
    }

    static func logError(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logError(env: env, message: message)) {
            NSLog("[avo] Error! " + message)
        }
    }
}

public protocol AvoCustomDestination {
    func make(env: AvoEnv)

    func make(env: AvoEnv, apiKey: String)

    func logEvent(eventName: String, eventProperties: [String:Any])

    func setUserProperties(userId: String, userProperties: [String:Any])

    func identify(userId: String)

    func unidentify()

    func logPage(pageName: String, eventProperties: [String:Any])

    func revenue(amount: Double, eventProperties: [String:Any])
}

extension  AvoCustomDestination {
    func make(env: AvoEnv) {}

    func make(env: AvoEnv, apiKey: String) {
        self.make(env: env)
    }
}


private struct AvoInvoke {
    static func toISO8601UTC(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter.string(from: date)
    }

    static var samplingRate = 1.0

    static func invoke(_ eventId: String, _ hash: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let me: [[String: Any]] = messages.map({
                    switch $0 {
                    case .expectedMax(let propertyId, _):
                        return ["tag": "expectedMax", "propertyId": propertyId]
                    case .expectedMin(let propertyId, _):
                        return ["tag": "expectedMin", "propertyId": propertyId]
                    }
                })
                let payload: [String: Any] = [
                    "ac": "2ZObu4NvsvWfU02FxPQw",
                    "br": "master",
                    "en": "dev",
                    "ev": eventId,
                    "ha": hash,
                    "sc": "M4rnD9FTAhZjl2fTnXLN",
                    "se": toISO8601UTC(Date()),
                    "so": "jm_s8y9kL",
                    "va": messages.isEmpty,
                    "me": me,
                    "or": "event"
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                        let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }

    static func invokeMeta(_ type: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let payload: [String: Any] = [
                    "ac": "2ZObu4NvsvWfU02FxPQw",
                    "br": "master",
                    "en": "dev",
                    "ty": type,
                    "sc": "M4rnD9FTAhZjl2fTnXLN",
                    "se": toISO8601UTC(Date()),
                    "so": "jm_s8y9kL",
                    "va": messages.isEmpty,
                    "me": []
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                       let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }
}

public protocol AvoProtocol {
    init (env: AvoEnv, postHogDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, strict: Bool,
        noop: Bool);
    
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/ZvwSL1YEPb)
     */
    func createLabel(labelName: String);
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/Fixp8iotAy)
     */
    func deleteLabel(labelName: String);
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - uuid: device id
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/RWqDc3YbmK)
     */
    func loadApp(uuid: String);
    
    /**
     ResetLabels: reset every labels
    
     - parameters:
       - labelCnt: total amount of label
    
     - SeeAlso: [ResetLabels](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/y_BO6kEz94)
     */
    func resetLabels(labelCnt: Int);
    
    /**
     SwipeRight: No description
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/mEMk_OnSYu)
     */
    func swipeRight();
    
    /**
     SwipeLeft: No description
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/s_T8JSaCCf)
     */
    func swipeLeft();
    
}

public class Avo: AvoProtocol {
    var __STRICT__: Bool = true
    public var __ENV__: AvoEnv = .prod
    public var __NOOP__: Bool = false
    var __DEBUGGER__: NSObject?
    var __INSPECTOR__: NSObject?
    var avoLogger: AvoLogger = EmptyAvoLogger()
    
    private func __MOBILE_DEBUGGER_ENABLED__() -> Bool {
        let selector = #selector(getter: UIFocusGuide.isEnabled)
        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            return self.__DEBUGGER__?.perform(selector) != nil
        } else {
            return false
        }
    }

    private func __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: String) {
        let selector = Selector(("setSchemaId:"))

        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            self.__DEBUGGER__?.perform(selector, with: schemaId)
        }
    }

    private func __MOBILE_DEBUGGER_POST_EVENT__(name: String, eventId: String, eventProps: Array<Dictionary<String, String>>, userProps: Array<Dictionary<String, String>>, messages: Array<Dictionary<String, String>>) {
        let params:[String: Any?] = ["timestamp": NSNumber(floatLiteral: Date().timeIntervalSince1970), "id": eventId,
                      "messages": messages, "eventProps": eventProps, "userProps": userProps]

        let selector = Selector(("publishEvent:withParams:"))
        self.__DEBUGGER__?.perform(selector, with: name, with: params)
    }
    
    let postHog: AvoCustomDestination
    
    let rudderStack: AvoCustomDestination
    
    public required init (env: AvoEnv,
        postHogDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, strict: Bool = true,
        noop: Bool = false) {
        __STRICT__ = strict
        __ENV__ = env
        __NOOP__ = noop
        
        postHog = postHogDestination
        rudderStack = rudderStackDestination
        if __NOOP__ && __ENV__ == .prod {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] WARNING!!! [avo]" +
          "\n    [avo] Avo cannot be initialized in noop mode in production:" +
          "\n    [avo] - Overwriting configuration with noop=false." +
          "\n    [avo] - Please reach out if you want to be able to run Avo in production mode with noop=true" +
          "\n    ****************************************************")
            __NOOP__ = false
        }
        if __NOOP__ {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] Avo is now initialized in noop mode. This means:" +
          "\n    [avo] - No events will be sent" +
          "\n    [avo] - No network requests are made" +
          "\n    ****************************************************")
        }
        if !__NOOP__ {
            if __ENV__ == .prod {
            }
            if __ENV__ == .dev {
            }
            if __ENV__ == .prod {
                postHog.make(env: env, apiKey: "phc_vJsSkb5CwpU1ODV2qtE36IhKUqrNErQaXPhXirRtKT2")
            } else if __ENV__ == .dev {
                postHog.make(env: env, apiKey: "phc_vJsSkb5CwpU1ODV2qtE36IhKUqrNErQaXPhXirRtKT2")
            } else {
                InternalAvoLogger.logError(__ENV__, avoLogger, "[avo] ERROR No staging key is set for PostHog. Head to destination settings in Avo to set a staging key.")
                postHog.make(env: env, apiKey: "")
            }
            if __ENV__ == .prod {
                rudderStack.make(env: env, apiKey: "27f1RQjDlKZhHpdGiT4z3JYe8EC")
            } else if __ENV__ == .dev {
                rudderStack.make(env: env, apiKey: "27f1RPyf43JsLVZ5FGGAphtlSJ3")
            } else {
                InternalAvoLogger.logError(__ENV__, avoLogger, "[avo] ERROR No staging key is set for RudderStack. Head to destination settings in Avo to set a staging key.")
                rudderStack.make(env: env, apiKey: "")
            }
            if __ENV__ != .prod {
                // debug console in Avo
                AvoInvoke.invokeMeta("init", [])
            }
            let className = "AvoInspector"
            let avoInspectorClass = NSClassFromString(className) as? NSObject.Type

            if let InspectorClass = avoInspectorClass {
                self.__INSPECTOR__ = InspectorClass.init()
                let initSelector = Selector(("initWithApiKey:envInt:"))
                if (self.__INSPECTOR__?.responds(to: initSelector)) == true {
                    if __ENV__ == .prod {
                        self.__INSPECTOR__?.perform(initSelector, with:"PXSDmMdhEjkWGSAyaJAq", with:0)
                    } else if __ENV__ == .dev {
                        self.__INSPECTOR__?.perform(initSelector, with:"PXSDmMdhEjkWGSAyaJAq", with:1)
                    }
                } else {
                  let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                  InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            
        }
    }
    
    public convenience init (env: AvoEnv,
        postHogDestination: AvoCustomDestination,
        rudderStackDestination: AvoCustomDestination, debugger: NSObject,
        strict: Bool = false, noop: Bool = false) {
        self.init(env: env,  postHogDestination: postHogDestination,  rudderStackDestination: rudderStackDestination, strict: strict,noop: noop)
        if !__NOOP__ {
            self.__DEBUGGER__ = debugger
            __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: "M4rnD9FTAhZjl2fTnXLN")
        }
    }
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/ZvwSL1YEPb)
     */
    public func createLabel(labelName: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("ZvwSL1YEPb", "d39196f7b4663a1f916a54d6f904d6ecd2e264520a23cd4af0c05dcfdfb43060", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "-YLt7x6xcv", "name" : "label_name", "value" : String(describing:labelName)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "CreateLabel", eventId: "ZvwSL1YEPb", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["label_name"] = labelName
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "CreateLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["label_name"] = labelName
                    inspectorEventProperties["avoFunctionEventId"] = "ZvwSL1YEPb"
                    inspectorEventProperties["avoFunctionEventHash"] = "d39196f7b4663a1f916a54d6f904d6ecd2e264520a23cd4af0c05dcfdfb43060"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"CreateLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            var postHogEventProperties: [String: Any] = [:]
            postHogEventProperties["label_name"] = labelName
            postHog.logEvent(eventName: "CreateLabel", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["label_name"] = labelName
            rudderStack.logEvent(eventName: "CreateLabel", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - labelName: name of label
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/Fixp8iotAy)
     */
    public func deleteLabel(labelName: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("Fixp8iotAy", "ca0971923155ac7b27a1f1c5d4659470f66399f5f40c39ab9b51d9d3231aa8c1", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "-YLt7x6xcv", "name" : "label_name", "value" : String(describing:labelName)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "DeleteLabel", eventId: "Fixp8iotAy", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["label_name"] = labelName
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "DeleteLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["label_name"] = labelName
                    inspectorEventProperties["avoFunctionEventId"] = "Fixp8iotAy"
                    inspectorEventProperties["avoFunctionEventHash"] = "ca0971923155ac7b27a1f1c5d4659470f66399f5f40c39ab9b51d9d3231aa8c1"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"DeleteLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            var postHogEventProperties: [String: Any] = [:]
            postHogEventProperties["label_name"] = labelName
            postHog.logEvent(eventName: "DeleteLabel", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["label_name"] = labelName
            rudderStack.logEvent(eventName: "DeleteLabel", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - uuid: device id
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/RWqDc3YbmK)
     */
    public func loadApp(uuid: String) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("RWqDc3YbmK", "ded523bf295c72cd2d6cc308d9a22c5aca55c4044aad31628ecc4ca2f2d4477e", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "M18-6DIIcf", "name" : "uuid", "value" : String(describing:uuid)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LoadApp", eventId: "RWqDc3YbmK", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["uuid"] = uuid
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LoadApp", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["uuid"] = uuid
                    inspectorEventProperties["avoFunctionEventId"] = "RWqDc3YbmK"
                    inspectorEventProperties["avoFunctionEventHash"] = "ded523bf295c72cd2d6cc308d9a22c5aca55c4044aad31628ecc4ca2f2d4477e"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LoadApp", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            var postHogEventProperties: [String: Any] = [:]
            postHogEventProperties["uuid"] = uuid
            postHog.logEvent(eventName: "LoadApp", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["uuid"] = uuid
            rudderStack.logEvent(eventName: "LoadApp", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     ResetLabels: reset every labels
    
     - parameters:
       - labelCnt: total amount of label
    
     - SeeAlso: [ResetLabels](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/y_BO6kEz94)
     */
    public func resetLabels(labelCnt: Int) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("y_BO6kEz94", "f2521fe0096dad73cd6c4a09756ff4ccc9c6592588ac39fd222fa0ef3fa38c0d", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "WwwS2Sl2xG", "name" : "label_cnt", "value" : String(describing:labelCnt)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "ResetLabels", eventId: "y_BO6kEz94", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["label_cnt"] = labelCnt
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "ResetLabels", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["label_cnt"] = labelCnt
                    inspectorEventProperties["avoFunctionEventId"] = "y_BO6kEz94"
                    inspectorEventProperties["avoFunctionEventHash"] = "f2521fe0096dad73cd6c4a09756ff4ccc9c6592588ac39fd222fa0ef3fa38c0d"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"ResetLabels", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            var postHogEventProperties: [String: Any] = [:]
            postHogEventProperties["label_cnt"] = labelCnt
            postHog.logEvent(eventName: "ResetLabels", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            var rudderStackEventProperties: [String: Any] = [:]
            rudderStackEventProperties["label_cnt"] = labelCnt
            rudderStack.logEvent(eventName: "ResetLabels", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SwipeRight: No description
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/mEMk_OnSYu)
     */
    public func swipeRight() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("mEMk_OnSYu", "62b4f6ac156c550e162be45c1e44376503755ffcbd4e5c59c049ba4e51803fca", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeRight", eventId: "mEMk_OnSYu", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeRight", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "mEMk_OnSYu"
                    inspectorEventProperties["avoFunctionEventHash"] = "62b4f6ac156c550e162be45c1e44376503755ffcbd4e5c59c049ba4e51803fca"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeRight", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            let postHogEventProperties: [String: Any] = [:]
            postHog.logEvent(eventName: "SwipeRight", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SwipeRight", eventProperties: rudderStackEventProperties)
        }
    }
    
    /**
     SwipeLeft: No description
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/M4rnD9FTAhZjl2fTnXLN/events/s_T8JSaCCf)
     */
    public func swipeLeft() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("s_T8JSaCCf", "15f3ef983ab7cd08836efbcbaaffd60a94ca9c2734e1277ca1ff80093a521333", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeLeft", eventId: "s_T8JSaCCf", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeLeft", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "s_T8JSaCCf"
                    inspectorEventProperties["avoFunctionEventHash"] = "15f3ef983ab7cd08836efbcbaaffd60a94ca9c2734e1277ca1ff80093a521333"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeLeft", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination PostHog
            let postHogEventProperties: [String: Any] = [:]
            postHog.logEvent(eventName: "SwipeLeft", eventProperties: postHogEventProperties)
            
            // destination RudderStack
            let rudderStackEventProperties: [String: Any] = [:]
            rudderStack.logEvent(eventName: "SwipeLeft", eventProperties: rudderStackEventProperties)
        }
    }
    
}

// AVOMODULEMAP:"avo"
// AVOEVENTMAP:["createLabel","deleteLabel","loadApp","resetLabels","swipeRight","swipeLeft"]

