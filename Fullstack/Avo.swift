// Generated by Avo VERSION 106.58.0. You should never have to make changes to this file.
// If you find yourself in the situation where you have to edit the file please contact us at hi@avo.app.
// If you encounter a git conflict in this file run `avo pull` and it will be resolved automatically.
// swiftlint:disable all

import Foundation

import UIKit

public enum AvoEnv {
    case prod
    case dev
}

private enum AvoAssertMessage {
    case expectedMax(propertyId: String, message: String)
    case expectedMin(propertyId: String, message: String)

    func getMessage() -> String {
        switch self {
        case .expectedMax(_, let message):
            return message
        case .expectedMin(_, let message):
            return message
        }
    }
}

private struct AvoAssert {
    private init() {}

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Double, value: Double) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMax(_ propertyId: String, _ propertyName: String, max: Int, value: Int) -> [AvoAssertMessage] {
        if (value > max) {
            return [AvoAssertMessage.expectedMax(propertyId: propertyId, message: "\(propertyName) has a maximum value of \(String(max)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Double, value: Double) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }

    static func assertMin(_ propertyId: String, _ propertyName: String, min: Int, value: Int) -> [AvoAssertMessage] {
        if (value < min) {
            return [AvoAssertMessage.expectedMin(propertyId: propertyId, message: "\(propertyName) has a minimum value of \(String(min)) but you provided the value \(String(value))")]
        } else {
            return []
        }
    }
}

public protocol AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool
    func logWarn(env: AvoEnv, message: String) -> Bool
    func logError(env: AvoEnv, message: String) -> Bool
}

private class EmptyAvoLogger: AvoLogger {
    func logDebug(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logWarn(env: AvoEnv, message: String) -> Bool {
        return false
    }
    func logError(env: AvoEnv, message: String) -> Bool {
        return false
    }
}

private struct InternalAvoLogger {
    private init() {}

    static func logEventSent(
      _ env: AvoEnv,
      _ avoLogger: AvoLogger,
      _ eventName: String,
      _ eventProperties: [String:Any?],
      _ userProperties: [String:Any]
    ) {
        let message = "Event Sent: \(eventName) Event Props: \(eventProperties as AnyObject) User Props: \(userProperties as AnyObject)"
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logDebug(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logDebug(env: env, message: message)) {
            NSLog("[avo] " + message)
        }
    }

    static func logWarn(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logWarn(env: env, message: message)) {
            NSLog("[avo] Warning! " + message)
        }
    }

    static func logError(
        _ env: AvoEnv,
        _ avoLogger: AvoLogger,
        _ message: String
    ) {
        if (!avoLogger.logError(env: env, message: message)) {
            NSLog("[avo] Error! " + message)
        }
    }
}

public protocol AvoCustomDestination {
    func make(env: AvoEnv)

    func make(env: AvoEnv, apiKey: String?)

    func logEvent(eventName: String, eventProperties: [String:Any])

    func setUserProperties(userId: String, userProperties: [String:Any])

    func identify(userId: String)

    func unidentify()

    func logPage(pageName: String, eventProperties: [String:Any])

    func revenue(amount: Double, eventProperties: [String:Any])
}

extension  AvoCustomDestination {
    func make(env: AvoEnv) {}

    func make(env: AvoEnv, apiKey: String?) {
        self.make(env: env)
    }
}


private struct AvoInvoke {
    static func toISO8601UTC(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter.string(from: date)
    }

    static var samplingRate = 1.0

    static func invoke(_ eventId: String, _ hash: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let me: [[String: Any]] = messages.map({
                    switch $0 {
                    case .expectedMax(let propertyId, _):
                        return ["tag": "expectedMax", "propertyId": propertyId]
                    case .expectedMin(let propertyId, _):
                        return ["tag": "expectedMin", "propertyId": propertyId]
                    }
                })
                let payload: [String: Any] = [
                    "ac": "sPFlc31wQMxGcDxOOxV8",
                    "br": "master",
                    "en": "dev",
                    "ev": eventId,
                    "ha": hash,
                    "sc": "7ciSv8ttyux1PesrCqHg",
                    "se": toISO8601UTC(Date()),
                    "so": "B16x3waHE",
                    "va": messages.isEmpty,
                    "me": me,
                    "or": "event"
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                        let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }

    static func invokeMeta(_ type: String, _ messages: [AvoAssertMessage]) {
        if (samplingRate > 0) {
            if (drand48() < samplingRate) {
                let payload: [String: Any] = [
                    "ac": "sPFlc31wQMxGcDxOOxV8",
                    "br": "master",
                    "en": "dev",
                    "ty": type,
                    "sc": "7ciSv8ttyux1PesrCqHg",
                    "se": toISO8601UTC(Date()),
                    "so": "B16x3waHE",
                    "va": messages.isEmpty,
                    "me": []
                ]

                let json = try? JSONSerialization.data(withJSONObject: payload)
                let url = URL(string: "https://api.avo.app/i")!
                var request = URLRequest(url: url)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                request.httpMethod = "POST"
                request.httpBody = json

                let task = URLSession.shared.dataTask(with: request) { data, response, error in
                    guard let data = data, error == nil else {
                        print(error?.localizedDescription ?? "No data")
                        return
                    }
                    let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
                    if let responseJson = responseJSON as? [String: Any],
                       let rate = responseJson["sa"] as? Double {
                        samplingRate = rate
                    }
                }
                task.resume()
            }
        }
    }
}

public protocol AvoProtocol {
    init (env: AvoEnv, mixpanelDestination: AvoCustomDestination,
        strict: Bool, noop: Bool);
    
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - nameOfLabel: string
       - color: string
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/CAYQd484F)
     */
    func createLabel(nameOfLabel: Any?, color: Any?);
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - nameOfLabel: string
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/i9mKwD9ucp)
     */
    func deleteLabel(nameOfLabel: Any?);
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - deviceId: string
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/EYgi37sRaf)
     */
    func loadApp(deviceId: Any?);
    
    /**
     SwipeRight: User swipe the screenshots to right on MainLabelingView
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/Rwnw37eCjI)
     */
    func swipeRight();
    
    /**
     SwipeLeft: User swipe the screenshots to the left on MainLabelingView
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/np9v_HzdTc)
     */
    func swipeLeft();
    
    /**
     MainLabelingView: TabBar1 MainLabelingView
    
     - SeeAlso: [MainLabelingView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/qfBYemM1pa)
     */
    func mainLabelingView();
    
    /**
     HomeView: TabBar2 HomeView
    
     - parameters:
       - listOfLabelentity: object
    
     - SeeAlso: [HomeView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/vtoBUgXLye)
     */
    func homeView(listOfLabelentity: Any);
    
    /**
     SettingView: Settings View
    
     - SeeAlso: [SettingView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/LU71Wrksri)
     */
    func settingView();
    
    /**
     LabelAlbumView: TabBar3 LabelView
    
     - SeeAlso: [LabelAlbumView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/yGunljvre7)
     */
    func labelAlbumView();
    
    /**
     ScreenshotLabeling: labeling the screenshots
    
     - parameters:
       - listOfLabelentity: object
    
     - SeeAlso: [ScreenshotLabeling](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/Foy8cjdsTY)
     */
    func screenshotLabeling(listOfLabelentity: Any);
    
    /**
     SkipButton: skip button touched on MainLabelingView
    
     - SeeAlso: [SkipButton](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/DU49hQLIY18)
     */
    func skipButton();
    
    /**
     SelectButton: select button touched on MainLabelingView
    
     - SeeAlso: [SelectButton](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/QqLP0AbuxkT)
     */
    func selectButton();
    
    /**
     LabelList: List of labels
    
     - parameters:
       - labelEntity: no description
    
     - SeeAlso: [LabelList](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/ytrRZhABwz)
     */
    func labelList(labelEntity: String?);
    
    /**
     LabelEntity: No description
    
     - SeeAlso: [LabelEntity](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/lvJE9SGksV)
     */
    func labelEntity();
    
}

public class Avo: AvoProtocol {
    var __STRICT__: Bool = true
    public var __ENV__: AvoEnv = .prod
    public var __NOOP__: Bool = false
    var __DEBUGGER__: NSObject?
    var __INSPECTOR__: NSObject?
    var avoLogger: AvoLogger = EmptyAvoLogger()
    
    private func __MOBILE_DEBUGGER_ENABLED__() -> Bool {
        let selector = #selector(getter: UIFocusGuide.isEnabled)
        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            return self.__DEBUGGER__?.perform(selector) != nil
        } else {
            return false
        }
    }

    private func __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: String) {
        let selector = Selector(("setSchemaId:"))

        if (self.__DEBUGGER__?.responds(to: selector)) == true {
            self.__DEBUGGER__?.perform(selector, with: schemaId)
        }
    }

    private func __MOBILE_DEBUGGER_POST_EVENT__(name: String, eventId: String, eventProps: Array<Dictionary<String, String>>, userProps: Array<Dictionary<String, String>>, messages: Array<Dictionary<String, String>>) {
        let params:[String: Any?] = ["timestamp": NSNumber(floatLiteral: Date().timeIntervalSince1970), "id": eventId,
                      "messages": messages, "eventProps": eventProps, "userProps": userProps]

        let selector = Selector(("publishEvent:withParams:"))
        self.__DEBUGGER__?.perform(selector, with: name, with: params)
    }
    
    let mixpanel: AvoCustomDestination
    
    public required init (env: AvoEnv,
        mixpanelDestination: AvoCustomDestination, strict: Bool = true,
        noop: Bool = false) {
        __STRICT__ = strict
        __ENV__ = env
        __NOOP__ = noop
        
        mixpanel = mixpanelDestination
        if __NOOP__ && __ENV__ == .prod {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] WARNING!!! [avo]" +
          "\n    [avo] Avo cannot be initialized in noop mode in production:" +
          "\n    [avo] - Overwriting configuration with noop=false." +
          "\n    [avo] - Please reach out if you want to be able to run Avo in production mode with noop=true" +
          "\n    ****************************************************")
            __NOOP__ = false
        }
        if __NOOP__ {
            InternalAvoLogger.logWarn(__ENV__, avoLogger, "\n    ****************************************************" +
          "\n    [avo] Avo is now initialized in noop mode. This means:" +
          "\n    [avo] - No events will be sent" +
          "\n    [avo] - No network requests are made" +
          "\n    ****************************************************")
        }
        if !__NOOP__ {
            if __ENV__ == .prod {
            }
            if __ENV__ == .dev {
            }
            if __ENV__ == .prod {
                mixpanel.make(env: env, apiKey: "b579da30a51257ae82424ad462ca4794")
            } else if __ENV__ == .dev {
                mixpanel.make(env: env, apiKey: "b579da30a51257ae82424ad462ca4794")
            } else {
                InternalAvoLogger.logError(__ENV__, avoLogger, "[avo] ERROR No staging key is set for Mixpanel. Head to destination settings in Avo to set a staging key.")
                mixpanel.make(env: env, apiKey: nil)
            }
            if __ENV__ != .prod {
                // debug console in Avo
                AvoInvoke.invokeMeta("init", [])
            }
            let className = "AvoInspector"
            let avoInspectorClass = NSClassFromString(className) as? NSObject.Type

            if let InspectorClass = avoInspectorClass {
                self.__INSPECTOR__ = InspectorClass.init()
                let initSelector = Selector(("initWithApiKey:envInt:"))
                if (self.__INSPECTOR__?.responds(to: initSelector)) == true {
                    if __ENV__ == .prod {
                        self.__INSPECTOR__?.perform(initSelector, with:"4WkjiU9mt3D7kw1jK5fj", with:0)
                    } else if __ENV__ == .dev {
                        self.__INSPECTOR__?.perform(initSelector, with:"4WkjiU9mt3D7kw1jK5fj", with:1)
                    }
                } else {
                  let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                  InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            
        }
    }
    
    public convenience init (env: AvoEnv,
        mixpanelDestination: AvoCustomDestination, debugger: NSObject,
        strict: Bool = false, noop: Bool = false) {
        self.init(env: env,  mixpanelDestination: mixpanelDestination, strict: strict,noop: noop)
        if !__NOOP__ {
            self.__DEBUGGER__ = debugger
            __MOBILE_DEBUGGER_SET_SCHEMA_ID__(schemaId: "7ciSv8ttyux1PesrCqHg")
        }
    }
    
    /**
     CreateLabel: User create a new label
    
     - parameters:
       - nameOfLabel: string
       - color: string
    
     - SeeAlso: [CreateLabel](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/CAYQd484F)
     */
    public func createLabel(nameOfLabel: Any?, color: Any?) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("CAYQd484F", "452f79629e91d99bf544c9652b51fdd5340edbbd43afaa006bd3a9ca75c7faaf", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "y0zmtgFpmf3", "name" : "name of label", "value" : String(describing:nameOfLabel as Any)],
                  ["id" : "-3BfgRBX9P3", "name" : "color", "value" : String(describing:color as Any)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "CreateLabel", eventId: "CAYQd484F", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["name of label"] = nameOfLabel
            avoLogEventProperties["color"] = color
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "CreateLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    if let it = nameOfLabel {
                        inspectorEventProperties["name of label"] = it
                    }
                    if let it = color {
                        inspectorEventProperties["color"] = it
                    }
                    inspectorEventProperties["avoFunctionEventId"] = "CAYQd484F"
                    inspectorEventProperties["avoFunctionEventHash"] = "452f79629e91d99bf544c9652b51fdd5340edbbd43afaa006bd3a9ca75c7faaf"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"CreateLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            if let it = nameOfLabel {
                mixpanelEventProperties["name of label"] = it
            }
            if let it = color {
                mixpanelEventProperties["color"] = it
            }
            mixpanel.logEvent(eventName: "CreateLabel", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     DeleteLabel: delete the label
    
     - parameters:
       - nameOfLabel: string
    
     - SeeAlso: [DeleteLabel](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/i9mKwD9ucp)
     */
    public func deleteLabel(nameOfLabel: Any?) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("i9mKwD9ucp", "6ac962c34755c8ea275dba9cedf9d7388f257c3736c2b85522a38e9034e6f05d", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "y0zmtgFpmf3", "name" : "name of label", "value" : String(describing:nameOfLabel as Any)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "DeleteLabel", eventId: "i9mKwD9ucp", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["name of label"] = nameOfLabel
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "DeleteLabel", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    if let it = nameOfLabel {
                        inspectorEventProperties["name of label"] = it
                    }
                    inspectorEventProperties["avoFunctionEventId"] = "i9mKwD9ucp"
                    inspectorEventProperties["avoFunctionEventHash"] = "6ac962c34755c8ea275dba9cedf9d7388f257c3736c2b85522a38e9034e6f05d"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"DeleteLabel", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            if let it = nameOfLabel {
                mixpanelEventProperties["name of label"] = it
            }
            mixpanel.logEvent(eventName: "DeleteLabel", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     LoadApp: User open the app
    
     - parameters:
       - deviceId: string
    
     - SeeAlso: [LoadApp](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/EYgi37sRaf)
     */
    public func loadApp(deviceId: Any?) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("EYgi37sRaf", "7b36ca8b3bcd6d954224e2979f95de3023cb42abded7b7e3d6d820c3566ba4df", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "ZZojRIwC-eW", "name" : "deviceId", "value" : String(describing:deviceId as Any)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LoadApp", eventId: "EYgi37sRaf", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["deviceId"] = deviceId
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LoadApp", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    if let it = deviceId {
                        inspectorEventProperties["deviceId"] = it
                    }
                    inspectorEventProperties["avoFunctionEventId"] = "EYgi37sRaf"
                    inspectorEventProperties["avoFunctionEventHash"] = "7b36ca8b3bcd6d954224e2979f95de3023cb42abded7b7e3d6d820c3566ba4df"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LoadApp", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            if let it = deviceId {
                mixpanelEventProperties["deviceId"] = it
            }
            mixpanel.logEvent(eventName: "LoadApp", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     SwipeRight: User swipe the screenshots to right on MainLabelingView
    
     - SeeAlso: [SwipeRight](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/Rwnw37eCjI)
     */
    public func swipeRight() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("Rwnw37eCjI", "cfdba6e9d2dd71ef6d2ac86392a03204e73b835567ae67440bd03d54ee9a6068", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeRight", eventId: "Rwnw37eCjI", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeRight", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "Rwnw37eCjI"
                    inspectorEventProperties["avoFunctionEventHash"] = "cfdba6e9d2dd71ef6d2ac86392a03204e73b835567ae67440bd03d54ee9a6068"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeRight", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "SwipeRight", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     SwipeLeft: User swipe the screenshots to the left on MainLabelingView
    
     - SeeAlso: [SwipeLeft](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/np9v_HzdTc)
     */
    public func swipeLeft() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("np9v_HzdTc", "1a18a07ba33985b7d04cc4545e444eca689213046addf3666e2cbeacc95fa422", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SwipeLeft", eventId: "np9v_HzdTc", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SwipeLeft", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "np9v_HzdTc"
                    inspectorEventProperties["avoFunctionEventHash"] = "1a18a07ba33985b7d04cc4545e444eca689213046addf3666e2cbeacc95fa422"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SwipeLeft", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "SwipeLeft", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     MainLabelingView: TabBar1 MainLabelingView
    
     - SeeAlso: [MainLabelingView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/qfBYemM1pa)
     */
    public func mainLabelingView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("qfBYemM1pa", "c7aab47ffab4683a207d0e6e3a024d06c8bafb0d19d1de3c14cf3f6f9b7d9580", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "MainLabelingView", eventId: "qfBYemM1pa", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "MainLabelingView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "qfBYemM1pa"
                    inspectorEventProperties["avoFunctionEventHash"] = "c7aab47ffab4683a207d0e6e3a024d06c8bafb0d19d1de3c14cf3f6f9b7d9580"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"MainLabelingView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "MainLabelingView", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     HomeView: TabBar2 HomeView
    
     - parameters:
       - listOfLabelentity: object
    
     - SeeAlso: [HomeView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/vtoBUgXLye)
     */
    public func homeView(listOfLabelentity: Any) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("vtoBUgXLye", "95dbf154e3351b32a165823ae8b06baf2f772a29b12b0d5ee715c87435603c48", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "WJJa_pF1qiB", "name" : "list of labelEntity", "value" : String(describing:listOfLabelentity)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "HomeView", eventId: "vtoBUgXLye", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["list of labelEntity"] = listOfLabelentity
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "HomeView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["list of labelEntity"] = listOfLabelentity
                    inspectorEventProperties["avoFunctionEventId"] = "vtoBUgXLye"
                    inspectorEventProperties["avoFunctionEventHash"] = "95dbf154e3351b32a165823ae8b06baf2f772a29b12b0d5ee715c87435603c48"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"HomeView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            mixpanelEventProperties["list of labelEntity"] = listOfLabelentity
            mixpanel.logEvent(eventName: "HomeView", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     SettingView: Settings View
    
     - SeeAlso: [SettingView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/LU71Wrksri)
     */
    public func settingView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("LU71Wrksri", "2048598e915dcab1e045bf4017b366d8582467220715ae6cc6e6091ce5285b80", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SettingView", eventId: "LU71Wrksri", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SettingView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "LU71Wrksri"
                    inspectorEventProperties["avoFunctionEventHash"] = "2048598e915dcab1e045bf4017b366d8582467220715ae6cc6e6091ce5285b80"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SettingView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "SettingView", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     LabelAlbumView: TabBar3 LabelView
    
     - SeeAlso: [LabelAlbumView](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/yGunljvre7)
     */
    public func labelAlbumView() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("yGunljvre7", "91c58bdfd8d86e4ae53f985a1d7bc91cab08660876fb3a8232517d0c75e21484", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LabelAlbumView", eventId: "yGunljvre7", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LabelAlbumView", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "yGunljvre7"
                    inspectorEventProperties["avoFunctionEventHash"] = "91c58bdfd8d86e4ae53f985a1d7bc91cab08660876fb3a8232517d0c75e21484"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LabelAlbumView", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "LabelAlbumView", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     ScreenshotLabeling: labeling the screenshots
    
     - parameters:
       - listOfLabelentity: object
    
     - SeeAlso: [ScreenshotLabeling](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/Foy8cjdsTY)
     */
    public func screenshotLabeling(listOfLabelentity: Any) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("Foy8cjdsTY", "bef2d986a214526c5ba1d6076fadd6329425cb8c4fe2367713c8861c3c3109b3", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "WJJa_pF1qiB", "name" : "list of labelEntity", "value" : String(describing:listOfLabelentity)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "ScreenshotLabeling", eventId: "Foy8cjdsTY", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["list of labelEntity"] = listOfLabelentity
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "ScreenshotLabeling", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["list of labelEntity"] = listOfLabelentity
                    inspectorEventProperties["avoFunctionEventId"] = "Foy8cjdsTY"
                    inspectorEventProperties["avoFunctionEventHash"] = "bef2d986a214526c5ba1d6076fadd6329425cb8c4fe2367713c8861c3c3109b3"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"ScreenshotLabeling", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            mixpanelEventProperties["list of labelEntity"] = listOfLabelentity
            mixpanel.logEvent(eventName: "ScreenshotLabeling", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     SkipButton: skip button touched on MainLabelingView
    
     - SeeAlso: [SkipButton](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/DU49hQLIY18)
     */
    public func skipButton() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("DU49hQLIY18", "d7e98807a29054bef8e2027e82c0efa8fcc9f729baa9150cf635b8c5dfb19d1d", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SkipButton", eventId: "DU49hQLIY18", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SkipButton", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "DU49hQLIY18"
                    inspectorEventProperties["avoFunctionEventHash"] = "d7e98807a29054bef8e2027e82c0efa8fcc9f729baa9150cf635b8c5dfb19d1d"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SkipButton", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "SkipButton", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     SelectButton: select button touched on MainLabelingView
    
     - SeeAlso: [SelectButton](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/QqLP0AbuxkT)
     */
    public func selectButton() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("QqLP0AbuxkT", "3b0d82d1b866bd715ea903ba312d2e929d0c97f9794e0e8f2ece6a2c259c869d", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "SelectButton", eventId: "QqLP0AbuxkT", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "SelectButton", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "QqLP0AbuxkT"
                    inspectorEventProperties["avoFunctionEventHash"] = "3b0d82d1b866bd715ea903ba312d2e929d0c97f9794e0e8f2ece6a2c259c869d"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"SelectButton", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "SelectButton", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     LabelList: List of labels
    
     - parameters:
       - labelEntity: no description
    
     - SeeAlso: [LabelList](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/ytrRZhABwz)
     */
    public func labelList(labelEntity: String?) {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("ytrRZhABwz", "574aa1120b77c2d61bf7d211f48073c1334ff829fd70fe8ea1eff7b24a2564f8", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = [
                  ["id" : "6nIqj011zs", "name" : "labelEntity", "value" : String(describing:labelEntity as Any)]]
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LabelList", eventId: "ytrRZhABwz", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            var avoLogEventProperties: [String: Any?] = [:]
            avoLogEventProperties["labelEntity"] = labelEntity
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LabelList", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    if let it = labelEntity {
                        inspectorEventProperties["labelEntity"] = it
                    }
                    inspectorEventProperties["avoFunctionEventId"] = "ytrRZhABwz"
                    inspectorEventProperties["avoFunctionEventHash"] = "574aa1120b77c2d61bf7d211f48073c1334ff829fd70fe8ea1eff7b24a2564f8"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LabelList", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            var mixpanelEventProperties: [String: Any] = [:]
            if let it = labelEntity {
                mixpanelEventProperties["labelEntity"] = it
            }
            mixpanel.logEvent(eventName: "LabelList", eventProperties: mixpanelEventProperties)
        }
    }
    
    /**
     LabelEntity: No description
    
     - SeeAlso: [LabelEntity](https://www.avo.app/schemas/7ciSv8ttyux1PesrCqHg/events/lvJE9SGksV)
     */
    public func labelEntity() {
        // assert properties
        if __ENV__ != .prod || __MOBILE_DEBUGGER_ENABLED__() {
            let messages: [AvoAssertMessage] = []
            // debug console in Avo
            if !__NOOP__ {
                AvoInvoke.invoke("lvJE9SGksV", "a95b85fe1b6091f51b1a090dc1d7b49c28be1735c1cef8c94893a009dd5cf959", messages)
            }
            if __ENV__ != .prod && __DEBUGGER__ != nil || __ENV__ == .prod && __MOBILE_DEBUGGER_ENABLED__() {
                // Avo mobile debugger
                let event_props: Array<Dictionary<String, String>> = []
                let user_props: Array<Dictionary<String, String>> = []
                var debugger_messages: Array<Dictionary<String, String>> = []
                for message in messages {
                  switch message {
                    case .expectedMax(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMax", "propertyId": propertyId, "message": message.getMessage()])
                    case .expectedMin(let propertyId, _):
                      debugger_messages.append(["tag": "expectedMin", "propertyId": propertyId, "message": message.getMessage()])
                  }
                }
                
                __MOBILE_DEBUGGER_POST_EVENT__(name: "LabelEntity", eventId: "lvJE9SGksV", eventProps: event_props, userProps: user_props, messages: debugger_messages)
            }
        }
        
        if __ENV__ != .prod {
            let avoLogEventProperties: [String: Any] = [:]
            let avoLogUserProperties: [String: Any] = [:]
            InternalAvoLogger.logEventSent(__ENV__, avoLogger, "LabelEntity", avoLogEventProperties, avoLogUserProperties)
        }
        
        if !__NOOP__ {
            if self.__INSPECTOR__ != nil {
                let trackSchemaFromEventSelector = Selector(("avoFunctionTrackSchemaFromEvent:eventParams:"))
                if self.__INSPECTOR__?.responds(to: trackSchemaFromEventSelector) == true {
                    var inspectorEventProperties: [String: Any] = [:]
                    inspectorEventProperties["avoFunctionEventId"] = "lvJE9SGksV"
                    inspectorEventProperties["avoFunctionEventHash"] = "a95b85fe1b6091f51b1a090dc1d7b49c28be1735c1cef8c94893a009dd5cf959"
                    self.__INSPECTOR__?.perform(trackSchemaFromEventSelector, with:"LabelEntity", with:inspectorEventProperties)
                } else {
                    let errorMesage = "Included Avo Inspector version does not support the latest features used in Avo functions. Please update your Avo Inspector to the latest version."
                    InternalAvoLogger.logError(__ENV__, avoLogger, errorMesage)
                }
            }
            // destination Mixpanel
            let mixpanelEventProperties: [String: Any] = [:]
            mixpanel.logEvent(eventName: "LabelEntity", eventProperties: mixpanelEventProperties)
        }
    }
    
}

// AVOMODULEMAP:"avo"
// AVOEVENTMAP:["createLabel","deleteLabel","loadApp","swipeRight","swipeLeft","mainLabelingView","homeView","settingView","labelAlbumView","screenshotLabeling","skipButton","selectButton","labelList","labelEntity"]

