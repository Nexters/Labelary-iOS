"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AvoInspector_1 = require("../AvoInspector");
const AvoNetworkCallsHandler_1 = require("../AvoNetworkCallsHandler");
const constants_1 = require("./constants");
describe("Batcher", () => {
    let inspectorCallSpy;
    const { apiKey, env, version, shouldLog, appName } = constants_1.defaultOptions;
    beforeAll(() => {
        inspectorCallSpy = jest.spyOn(AvoNetworkCallsHandler_1.AvoNetworkCallsHandler.prototype, "callInspectorWithBatchBody");
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    test("handleTrackSchema sends session to AvoNetworkCallsHandler and then sends event respecting sampling rate", () => __awaiter(void 0, void 0, void 0, function* () {
        const inspector = new AvoInspector_1.AvoInspector(constants_1.defaultOptions);
        inspector.enableLogging(false);
        inspectorCallSpy.mockImplementation(() => {
            inspector.avoBatcher["networkCallsHandler"]["samplingRate"] = 0.1;
            return Promise.resolve();
        });
        yield inspector.avoBatcher.handleTrackSchema("event name", [], null, null);
        expect(inspectorCallSpy).toHaveBeenCalledTimes(2);
        expect(inspectorCallSpy).toHaveBeenCalledWith([
            expect.objectContaining({
                type: "sessionStarted",
                apiKey: apiKey,
                appName: appName,
                appVersion: version,
                libVersion: expect.anything(),
                env: env,
                libPlatform: "node",
                messageId: expect.anything(),
                trackingId: "",
                createdAt: expect.anything(),
                sessionId: expect.anything(),
                samplingRate: 1,
            }),
        ]);
        expect(inspectorCallSpy).toHaveBeenCalledWith([
            expect.objectContaining({
                type: "event",
                apiKey: apiKey,
                appName: appName,
                appVersion: version,
                libVersion: expect.anything(),
                env: env,
                libPlatform: "node",
                messageId: expect.anything(),
                trackingId: "",
                createdAt: expect.anything(),
                sessionId: expect.anything(),
                samplingRate: 0.1,
            }),
        ]);
    }));
});
