"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AvoBatcher_1 = require("../AvoBatcher");
const AvoInspector_1 = require("../AvoInspector");
const AvoNetworkCallsHandler_1 = require("../AvoNetworkCallsHandler");
const constants_1 = require("./constants");
const inspectorVersion = process.env.npm_package_version || "";
jest.mock("../AvoBatcher");
describe("Batcher", () => {
    let inspector;
    const { apiKey, env, version } = constants_1.defaultOptions;
    let networkHandler = new AvoNetworkCallsHandler_1.AvoNetworkCallsHandler(apiKey, env, "my-test-app", version, inspectorVersion);
    beforeAll(() => {
        inspector = new AvoInspector_1.AvoInspector(constants_1.defaultOptions);
        inspector.enableLogging(false);
        jest
            .spyOn(AvoBatcher_1.AvoBatcher.prototype, "handleTrackSchema")
            .mockImplementation(() => {
            return Promise.resolve();
        });
    });
    afterEach(() => {
        jest.clearAllMocks();
        // @ts-ignore
        inspector.avoDeduplicator._clearEvents();
    });
    test("Batcher is initialized on Inspector init", () => {
        expect(AvoBatcher_1.AvoBatcher).toHaveBeenCalledTimes(1);
        expect(AvoBatcher_1.AvoBatcher).toHaveBeenCalledWith(networkHandler);
    });
    test("handleTrackSchema is called on trackSchemaFromEvent", () => {
        const eventName = "event name";
        const properties = {
            prop0: "",
            prop2: false,
            prop3: 0,
            prop4: 0.0,
        };
        const schema = inspector.extractSchema(properties);
        inspector.trackSchemaFromEvent(eventName, properties);
        expect(inspector.avoBatcher.handleTrackSchema).toHaveBeenCalledTimes(1);
        expect(inspector.avoBatcher.handleTrackSchema).toBeCalledWith(eventName, schema, null, null);
    });
    test("handleTrackSchema is called on _avoFunctionTrackSchemaFromEvent", () => {
        const eventName = "event name";
        const properties = {
            prop0: "",
            prop2: false,
            prop3: 0,
            prop4: 0.0,
        };
        const eventId = "testId";
        const eventHash = "testHash";
        const schema = inspector.extractSchema(properties);
        // @ts-ignore
        inspector._avoFunctionTrackSchemaFromEvent(eventName, properties, eventId, eventHash);
        expect(inspector.avoBatcher.handleTrackSchema).toHaveBeenCalledTimes(1);
        expect(inspector.avoBatcher.handleTrackSchema).toBeCalledWith(eventName, schema, eventId, eventHash);
    });
});
