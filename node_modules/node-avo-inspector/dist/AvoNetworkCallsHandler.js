"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvoNetworkCallsHandler = void 0;
const AvoGuid_1 = require("./AvoGuid");
const AvoInspector_1 = require("./AvoInspector");
class AvoNetworkCallsHandler {
    constructor(apiKey, envName, appName, appVersion, libVersion) {
        this.samplingRate = 1.0;
        this.apiKey = apiKey;
        this.envName = envName;
        this.appName = appName;
        this.appVersion = appVersion;
        this.libVersion = libVersion;
    }
    callInspectorWithBatchBody(inEvents) {
        const events = inEvents.filter((x) => x != null);
        if (events.length === 0) {
            return Promise.resolve();
        }
        if (Math.random() > this.samplingRate) {
            if (AvoInspector_1.AvoInspector.shouldLog) {
                console.log("Avo Inspector: last event schema dropped due to sampling rate.");
            }
            return Promise.resolve();
        }
        if (AvoInspector_1.AvoInspector.shouldLog) {
            events.forEach(function (event) {
                if (event.type === "sessionStarted") {
                    console.log("Avo Inspector: sending session started event.");
                }
                else if (event.type === "event") {
                    let schemaEvent = event;
                    console.log("Avo Inspector: sending event " +
                        schemaEvent.eventName +
                        " with schema " +
                        JSON.stringify(schemaEvent.eventProperties));
                }
            });
        }
        return new Promise(function (resolve, reject) {
            const data = JSON.stringify(events);
            var options = {
                hostname: "api.avo.app",
                port: 443,
                path: AvoNetworkCallsHandler.trackingEndpoint,
                method: "POST",
                headers: {
                    "Content-Type": "text/plain",
                    "Content-Length": Buffer.byteLength(data),
                },
            };
            var req = require("https").request(options, (res) => {
                const chunks = [];
                res.on("data", (data) => chunks.push(data));
                res.on("end", () => {
                    try {
                        // @ts-ignore
                        const data = JSON.parse(Buffer.concat(chunks).toString());
                        // @ts-ignore
                        this.samplingRate = data.samplingRate;
                    }
                    catch (e) { }
                    resolve();
                });
            });
            req.write(data);
            req.on("error", () => {
                reject("Request failed");
            });
            req.on("timeout", () => {
                reject("Request timed out");
            });
            req.end();
        });
    }
    bodyForSessionStartedCall(sessionId) {
        let sessionBody = this.createBaseCallBody(sessionId);
        sessionBody.type = "sessionStarted";
        return sessionBody;
    }
    bodyForEventSchemaCall(sessionId, eventName, eventProperties, eventId, eventHash) {
        let eventSchemaBody = this.createBaseCallBody(sessionId);
        eventSchemaBody.type = "event";
        eventSchemaBody.eventName = eventName;
        eventSchemaBody.eventProperties = eventProperties;
        if (eventId != null) {
            eventSchemaBody.avoFunction = true;
            eventSchemaBody.eventId = eventId;
            eventSchemaBody.eventHash = eventHash;
        }
        else {
            eventSchemaBody.avoFunction = false;
            eventSchemaBody.eventId = null;
            eventSchemaBody.eventHash = null;
        }
        return eventSchemaBody;
    }
    createBaseCallBody(sessionId) {
        return {
            apiKey: this.apiKey,
            appName: this.appName,
            appVersion: this.appVersion,
            libVersion: this.libVersion,
            env: this.envName,
            libPlatform: "node",
            messageId: AvoGuid_1.AvoGuid.newGuid(),
            trackingId: "",
            createdAt: new Date().toISOString(),
            sessionId: sessionId,
            samplingRate: this.samplingRate,
        };
    }
}
exports.AvoNetworkCallsHandler = AvoNetworkCallsHandler;
AvoNetworkCallsHandler.trackingEndpoint = "/inspector/v1/track";
