"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvoDeduplicator = void 0;
const utils_1 = require("./utils");
class AvoDeduplicator {
    constructor() {
        this.avoFunctionsEvents = {};
        this.manualEvents = {};
        this.msToConsiderOld = 500;
        this.avoFunctionsEventsParams = {};
        this.manualEventsParams = {};
    }
    shouldRegisterEvent(eventName, params, fromAvoFunction) {
        this.clearOldEvents();
        if (fromAvoFunction) {
            this.avoFunctionsEvents[Date.now()] = eventName;
            this.avoFunctionsEventsParams[eventName] = params;
        }
        else {
            this.manualEvents[Date.now()] = eventName;
            this.manualEventsParams[eventName] = params;
        }
        let checkInAvoFunctions = !fromAvoFunction;
        return !this.hasSameEventAs(eventName, params, checkInAvoFunctions);
    }
    hasSameEventAs(eventName, params, checkInAvoFunctions) {
        let result = false;
        if (checkInAvoFunctions) {
            if (this.lookForEventIn(eventName, params, this.avoFunctionsEventsParams)) {
                result = true;
            }
        }
        else {
            if (this.lookForEventIn(eventName, params, this.manualEventsParams)) {
                result = true;
            }
        }
        if (result) {
            delete this.avoFunctionsEventsParams[eventName];
            delete this.manualEventsParams[eventName];
        }
        return result;
    }
    lookForEventIn(eventName, params, eventsStorage) {
        for (const otherEventName in eventsStorage) {
            if (eventsStorage.hasOwnProperty(otherEventName)) {
                if (otherEventName === eventName) {
                    const otherParams = eventsStorage[eventName];
                    if (otherParams && utils_1.deepEquals(params, otherParams)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    hasSeenEventParams(params, checkInAvoFunctions) {
        let result = false;
        if (checkInAvoFunctions) {
            if (this.lookForEventParamsIn(params, this.avoFunctionsEventsParams)) {
                result = true;
            }
        }
        else {
            if (this.lookForEventParamsIn(params, this.manualEventsParams)) {
                result = true;
            }
        }
        return result;
    }
    lookForEventParamsIn(params, eventsStorage) {
        for (const otherEventName in eventsStorage) {
            if (eventsStorage.hasOwnProperty(otherEventName)) {
                const otherParams = eventsStorage[otherEventName];
                if (otherParams && utils_1.deepEquals(params, otherParams)) {
                    return true;
                }
            }
        }
        return false;
    }
    clearOldEvents() {
        const now = Date.now();
        for (const time in this.avoFunctionsEvents) {
            if (this.avoFunctionsEvents.hasOwnProperty(time)) {
                const timestamp = Number(time) || 0;
                if (now - timestamp > this.msToConsiderOld) {
                    const eventName = this.avoFunctionsEvents[time];
                    delete this.avoFunctionsEvents[time];
                    delete this.avoFunctionsEventsParams[eventName];
                }
            }
        }
        for (const time in this.manualEvents) {
            if (this.manualEvents.hasOwnProperty(time)) {
                const timestamp = Number(time) || 0;
                if (now - timestamp > this.msToConsiderOld) {
                    const eventName = this.manualEvents[time];
                    delete this.manualEvents[time];
                    delete this.manualEventsParams[eventName];
                }
            }
        }
    }
    // used in tests
    _clearEvents() {
        this.avoFunctionsEvents = {};
        this.manualEvents = {};
        this.avoFunctionsEventsParams = {};
        this.manualEventsParams = {};
    }
}
exports.AvoDeduplicator = AvoDeduplicator;
