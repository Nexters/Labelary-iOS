"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvoInspector = void 0;
const AvoInspectorEnv_1 = require("./AvoInspectorEnv");
const AvoSchemaParser_1 = require("./AvoSchemaParser");
const AvoBatcher_1 = require("./AvoBatcher");
const AvoNetworkCallsHandler_1 = require("./AvoNetworkCallsHandler");
const AvoDeduplicator_1 = require("./AvoDeduplicator");
const utils_1 = require("./utils");
const libVersion = require("../package.json").version;
class AvoInspector {
    constructor(options) {
        // the constructor does aggressive null/undefined checking because same code paths will be accessible from JS
        if (utils_1.isValueEmpty(options.env)) {
            this.environment = AvoInspectorEnv_1.AvoInspectorEnv.Dev;
            console.warn("[Avo Inspector] No environment provided. Defaulting to dev.");
        }
        else if (Object.values(AvoInspectorEnv_1.AvoInspectorEnv).indexOf(options.env) === -1) {
            this.environment = AvoInspectorEnv_1.AvoInspectorEnv.Dev;
            console.warn("[Avo Inspector] Unsupported environment provided. Defaulting to dev. Supported environments - Dev, Staging, Prod.");
        }
        else {
            this.environment = options.env;
        }
        if (utils_1.isValueEmpty(options.apiKey)) {
            throw new Error("[Avo Inspector] No API key provided. Inspector can't operate without API key.");
        }
        else {
            this.apiKey = options.apiKey;
        }
        if (utils_1.isValueEmpty(options.version)) {
            throw new Error("[Avo Inspector] No version provided. Many features of Inspector rely on versioning. Please provide comparable string version, i.e. integer or semantic.");
        }
        else {
            this.version = options.version;
        }
        if (this.environment === AvoInspectorEnv_1.AvoInspectorEnv.Dev) {
            AvoInspector._shouldLog = true;
        }
        else {
            AvoInspector._shouldLog = false;
        }
        let avoNetworkCallsHandler = new AvoNetworkCallsHandler_1.AvoNetworkCallsHandler(this.apiKey, this.environment.toString(), options.appName || "", this.version, libVersion);
        this.avoBatcher = new AvoBatcher_1.AvoBatcher(avoNetworkCallsHandler);
        this.avoDeduplicator = new AvoDeduplicator_1.AvoDeduplicator();
    }
    static get shouldLog() {
        return this._shouldLog;
    }
    static set shouldLog(enable) {
        this._shouldLog = enable;
    }
    trackSchemaFromEvent(eventName, eventProperties) {
        try {
            if (this.avoDeduplicator.shouldRegisterEvent(eventName, eventProperties, false)) {
                if (AvoInspector.shouldLog) {
                    console.log("Avo Inspector: supplied event " +
                        eventName +
                        " with params " +
                        JSON.stringify(eventProperties));
                }
                let eventSchema = this.extractSchema(eventProperties, false);
                return this.trackSchemaInternal(eventName, eventSchema, null, null).then(() => {
                    return eventSchema;
                });
            }
            else {
                if (AvoInspector.shouldLog) {
                    console.log("Avo Inspector: Deduplicated event: " + eventName);
                }
                return Promise.resolve([]);
            }
        }
        catch (e) {
            console.error("Avo Inspector: something went wrong. Please report to support@avo.app.", e);
            return Promise.reject("Avo Inspector: something went wrong. Please report to support@avo.app.");
        }
    }
    _avoFunctionTrackSchemaFromEvent(eventName, eventProperties, eventId, eventHash) {
        try {
            if (this.avoDeduplicator.shouldRegisterEvent(eventName, eventProperties, true)) {
                if (AvoInspector.shouldLog) {
                    console.log("Avo Inspector: supplied event " +
                        eventName +
                        " with params " +
                        JSON.stringify(eventProperties));
                }
                let eventSchema = this.extractSchema(eventProperties, false);
                return this.trackSchemaInternal(eventName, eventSchema, eventId, eventHash).then(() => {
                    return eventSchema;
                });
            }
            else {
                if (AvoInspector.shouldLog) {
                    console.log("Avo Inspector: Deduplicated event: " + eventName);
                }
                return Promise.resolve([]);
            }
        }
        catch (e) {
            console.error("Avo Inspector: something went wrong. Please report to support@avo.app.", e);
            return Promise.reject("Avo Inspector: something went wrong. Please report to support@avo.app.");
        }
    }
    trackSchemaInternal(eventName, eventSchema, eventId, eventHash) {
        try {
            return this.avoBatcher.handleTrackSchema(eventName, eventSchema, eventId, eventHash);
        }
        catch (e) {
            console.error("Avo Inspector: something went wrong. Please report to support@avo.app.", e);
            return Promise.reject();
        }
    }
    enableLogging(enable) {
        AvoInspector._shouldLog = enable;
    }
    extractSchema(eventProperties, shouldLogIfEnabled = true) {
        try {
            if (this.avoDeduplicator.hasSeenEventParams(eventProperties, true)) {
                if (shouldLogIfEnabled && AvoInspector.shouldLog) {
                    console.warn("Avo Inspector: WARNING! You are trying to extract schema shape that was just reported by your Avo functions. " +
                        "This is an indicator of duplicate inspector reporting. " +
                        "Please reach out to support@avo.app for advice if you are not sure how to handle this.");
                }
            }
            if (AvoInspector.shouldLog) {
                console.log("Avo Inspector: extracting schema from " +
                    JSON.stringify(eventProperties));
            }
            return AvoSchemaParser_1.AvoSchemaParser.extractSchema(eventProperties);
        }
        catch (e) {
            console.error("Avo Inspector: something went wrong. Please report to support@avo.app.", e);
            return [];
        }
    }
}
exports.AvoInspector = AvoInspector;
AvoInspector._shouldLog = false;
